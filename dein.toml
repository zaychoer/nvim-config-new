[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
[[plugins]]
repo = 'nvim-lua/popup.nvim'
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
hook_add = """
nnoremap <silent> ;f <cmd>Telescope find_files<cr>
nnoremap <silent> ;s <cmd>Telescope grep_string<cr>
nnoremap <silent> ;g <cmd>Telescope live_grep<cr>
nnoremap <silent> ;b <cmd>Telescope buffers<cr>
nnoremap <silent> ;h <cmd>Telescope help_tags<cr>
nnoremap <silent> ;e <cmd>Telescope oldfiles<cr>

lua << EOF
local actions = require('telescope.actions')
-- Global remapping
------------------------------
require('telescope').setup{
  defaults = {
    vimgrep_arguments = {
      'rg',
      '--color=never',
      '--no-heading',
      '--with-filename',
      '--line-number',
      '--column',
      '--smart-case'
    },
    prompt_prefix = "üçú ",
    selection_caret = "> ",
    file_ignore_patterns = {"node_modules", ".git"},
    mappings = {
      n = {
        ["q"] = actions.close
      },
    },
  },
  pickers = {
    find_files = {
      hidden = true
    },
    oldfiles = {
      hidden = true
    }
  }
}
EOF
"""

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = """
nnoremap [git]    <Nop>
nmap     <Space>g [git]

nnoremap <silent> [git]st  :Git status -sb<CR>
nnoremap <silent> [git]d   :<C-u>Gdiff<CR>
nnoremap <silent> [git]b   :Git blame<CR>
nnoremap <silent> [git]h   :<C-u>GBrowse<CR>
"""

[[plugins]]
# https://vi.stackexchange.com/questions/18265/getting-fugitive-no-gbrowse-handler-found
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'EdenEast/nightfox.nvim'
#repo = 'dracula/vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'preservim/nerdtree'
hook_add = """
nnoremap <silent> ;/ <cmd>:NERDTreeToggle<cr>
nnoremap <silent> ;nf <cmd>::NERDTreeFind<cr>
"""

[[plugins]]
repo = 'kristijanhusak/defx-git'
hook_add = """
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '‚úπ',
  \ 'Staged'    : '‚úö',
  \ 'Untracked' : '‚ú≠',
  \ 'Renamed'   : '‚ûú',
  \ 'Unmerged'  : '‚ïê',
  \ 'Ignored'   : '‚òí',
  \ 'Deleted'   : '‚úñ',
  \ 'Unknown'   : '?'
  \ })
"""

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
depends = ['defx-git', 'defx-icons']
hook_add = """
nnoremap <silent>sf :<C-u>Defx -listed -resume
      \ -buffer-name=tab`tabpagenr()`
      \ `expand('%:p:h')` -search=`expand('%:p')`<CR>
nnoremap <silent>fi :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>
nnoremap <F3> :<C-u>Defx<CR>
call defx#custom#option('_', {
  \ 'toggle': 1,
  \ 'resume': 1,
  \ 'show_ignored_files': 1,
  \ 'columns': 'git:icons:indent:filename:mark',
  \ })
autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> e defx#do_action('open')
    nnoremap <silent><buffer><expr> l defx#do_action('open')
    nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o defx#do_action('open','tabnew')
    nnoremap <silent><buffer><expr> t defx#do_action('open_tree', 'toggle')
    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
  endfunction

call defx#custom#column('icon', {
      \ 'directory_icon': '‚ñ∏',
      \ 'opened_icon': '‚ñæ',
      \ 'root_icon': ' ',
      \ })
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : 'M',
  \ 'Staged'    : '‚úö',
  \ 'Untracked' : '‚ú≠',
  \ 'Renamed'   : '‚ûú',
  \ 'Unmerged'  : '‚ïê',
  \ 'Ignored'   : '‚òí',
  \ 'Deleted'   : '‚úñ',
  \ 'Unknown'   : '?'
  \ })
"""

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_add = """
lua << EOF
local nvim_lsp = require('lspconfig')

local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  local opts = { noremap=true, silent=true }

  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
end

nvim_lsp.tsserver.setup {
  on_attach = on_attach,
  filetypes = { "javascript", "typescript", "typescriptreact", "typescript.tsx" }
}
EOF
"""

[[plugins]]
repo = 'glepnir/lspsaga.nvim'
hook_add = """
lua << EOF
local saga = require 'lspsaga'

saga.init_lsp_saga {
  error_sign = 'ÓÇ∞',
  warn_sign = 'ÓÇ∞',
  hint_sign = 'ÓÇ∞',
  infor_sign = 'ÓÇ∞',
  border_style = "round",
}
EOF

nnoremap <silent> ;gd <Cmd>Lspsaga preview_definition<CR>
nnoremap <silent> ;gh <Cmd>Lspsaga lsp_finder<CR>
nnoremap <silent> ca <Cmd>Lspsaga code_action<CR>
vnoremap <silent> ca <Cmd><C-U>Lspsaga range_code_action<CR>
nnoremap <silent> ;gs <Cmd>Lspsaga signature_help<CR>
nnoremap <silent> <f2> <Cmd>Lspsaga rename<CR>
nnoremap <silent> [e <Cmd>Lspsaga diagnostic_jump_next<CR>
nnoremap <silent> ]e <Cmd>Lspsaga diagnostic_jump_prev<CR>
nnoremap <silent>K <Cmd>Lspsaga hover_doc<CR>
"""

# caw comment out
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = """
nmap ;c <Plug>(caw:hatpos:toggle)
vmap ;c <Plug>(caw:hatpos:toggle)
"""

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'gelguy/wilder.nvim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'kdheepak/lazygit.nvim'
hook_add = """
nnoremap <silent> <Space>gg :LazyGit<CR>
"""

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = """
let g:ale_fixers = {
\   'typescript': ['prettier'],
\   'typescriptreact': ['prettier'],
\   'javascript': ['prettier'],
\   'javascriptreact': ['prettier'],
\   'vue': ['prettier'],
\   'css': ['prettier'],
\}

let g:ale_sign_error = 'P>'
let g:ale_sign_warning = 'P-'
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_statusline_format = ['E%d', 'W%d', 'OK']
let g:ale_pattern_options = {
\   '.*\.json$': {'ale_enabled': 0},
\}

nmap <silent> <C-w>j <Plug>(ale_next_wrap)
nmap <silent> <C-w>k <Plug>(ale_previous_wrap)

let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_javascript_prettier_options = '--single-quote --trailing-comma all'
"""

